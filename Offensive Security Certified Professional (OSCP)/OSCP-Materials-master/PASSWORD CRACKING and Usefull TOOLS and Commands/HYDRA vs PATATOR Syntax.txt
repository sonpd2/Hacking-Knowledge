Main Program:
	THC-Hydra: hydra
	Patator: patator


Single usernames to use:
	Hydra: -l admin
	Patator: N/A. Happens with in url="http://192.168.1.44/...


Single password to use:
	Hydra: -p password
	Patator: N/A. Happens with in url="http://192.168.1.44/...



List of usernames to use:
	Hydra: -L /usr/share/seclists/Usernames/top_shortlist.txt
	Patator: 0=/usr/share/seclists/Usernames/top_shortlist.txt

List of passwords to use:
	Hydra: -P /usr/share/seclists/Passwords/500-worst-passwords.txt
	Patator: 1=/usr/share/seclists/Passwords/500-worst-passwords.txt


Use empty passwords/repeat username as password
	Hydra: -e ns
	Patator: N/A. Does not have the option.


Try all the passwords, before trying the next password
	Hydra: -u
	Patator: The password wordlist (FILE0) has a lower ID than the username wordlist (FILE1).


Quit after finding a valid login
	Hydra: -F
	Patator: -x quit:.... More about this later.


Limit the threads
	Hydra: -t 1
	Patator: --threads=1


Timeout value on request
	Hydra: -w 1
	Patator: timeout=1


Timeout before starting next thread
	Hydra: -W 1
	Patator: --rate-limit=1


Verbose (aka show redirects)
	Hydra: -v
	Patator: N/A. Does it out of the box (To hide them: -x ignore:code='301').


Show password attempts
	Hydra: -V
	Patator: N/A. Does it out of the box (To hide them: -x ignore:fgrep='Username and/or password incorrect.').


The target to attack
	Hydra: 192.168.1.44
	Patator: N/A. Happens later (url="http://192.168.1.44/DVWA/login.php"...)


Module to use
	Hydra: http-get-form
	Patator: http_fuzz



How to transmit the data
	Hydra: N/A. It is done in the module name. (http-get-form)
	Patator: method=GET


Web page to attack
	Hydra: "/DVWA/login.php:
	Patator: url="http://192.168.1.44/DVWA/vulnerabilities/brute/?username=FILE1&password=FILE0&Login=Login"


GET data to send
	Hydra: username=^USER^&password=^PASS^&Login=Login
	Patator: N/A. Happens with in url="http://192.168.1.44/...



Cookie/Header data to send
	Hydra: :H=Cookie: security=low; PHPSESSID=${SESSIONID}
	Patator: header="Cookie: security=low; PHPSESSID=${SESSIONID}"


Whitelist page response
	Hydra: :S=Welcome to the password protected area
	Patator #1: -x quit:fgrep="Welcome to the password protected area". Quit when this value is found the first time.


	Patator #2: -x ignore:fgrep!="Welcome to the password protected area". Only display pages which do match.


Blacklist page response
	Hydra: :F=Username and/or password incorrect.
	
	Patator #1: -x quit:fgrep!='Username and/or password incorrect.'. Quit as soon as this is NOT found.
	
	Patator #2: -x ignore:fgrep='Username and/or password incorrect.'. Only print pages which do NOT match.


Blacklist page length of 4945
	Hydra: :F=Content-Length\: 4945
	Patator: -x ignore:clen=4945


AND operator
	Hydra: N/A. Does not have the feature.
	Patator: ,clen!='...



Do not follow requests
	Hydra: N/A. Have to use a proxy in line with it.
	Patator: follow=0


Do not accept cookies
	Hydra: N/A. Have to use a proxy in line with it.
	Patator: accept_cookie=0



Use in a HTTP proxy
	Hydra: export HYDRA_PROXY_HTTP=http://127.0.0.1:8080
	Patator: http_proxy=127.0.0.1:8080



Amount of retires to perform
	Hydra: N/A. Does not have the feature.
	Patator: --max-retries=0



Visit a page before the request, to get a input to use as a value (aka anti-CSRF bypassing)
	
	Hydra: N/A. Does not have the exact feature (closest is: :C=/page_to_get_cookie_value_only)


	Patator: before_urls="http://.../" before_egrep="_CSRF_:<input type='hidden' name='csrf_token' value='(\w+)' />"